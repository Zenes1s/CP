#include<bits/stdc++.h>
using namespace std;
#define int long long int
vector<int> *getPath(int **edges,int n,int sv,int ev)
{
    queue<int> q;
    bool *visited=new bool[n];
    for(int i=0;i<n;i++)
    visited[i]=false;
    q.push(sv);
    visited[sv]=true;
    bool done=false;
    map<int,int> m;
    while(!q.empty() && !done)
    {
        int front=q.front();
        q.pop();
        for(int i=0;i<n;i++)
        {
            if(edges[front][i] && !visited[i])
            {
                m[i]=front;
                q.push(i);
                visited[i]=true;
                if(i==ev)
                {
                    done=true;
                    break;
                }
            }
        }
    }
    if(!done)
    return NULL;
    else
    {
        vector<int> *output=new vector<int>();
        int current=ev;
        output->push_back(ev);
        while(current!=sv)
        {
            current=m[current];
            output->push_back(current);
        }
        return output;
    }
}
int32_t main()
{
    int n,e,x,y;
    cin>>n>>e;
    int **edges=new int*[n];
    for(int i=0;i<n;i++)
    {
        edges[i]=new int[n];
        for(int j=0;j<n;j++)
        edges[i][j]=0;
    }
    for(int i=0;i<e;i++)
    {
        cin>>x>>y;
        edges[x][y]=1;
        edges[y][x]=1;
    }
    int sv,ev;
    cin>>sv>>ev;
    vector<int> *output=getPath(edges,n,sv,ev);
    if(output!=NULL)
    {
        for(int i=0;i<output->size();i++)
        {
            cout<<output->at(i)<<" ";
        }
    }
}