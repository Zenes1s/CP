#include<bits/stdc++.h>
using namespace std;
#define int long long int
int getMinVertex(int *visited,int *dist,int n)
{
    int ans=INT_MAX,index;
    for(int i=0;i<n;i++)
    {
        if(!visited[i])
        {
            if(dist[i]<ans)
            {
                ans=dist[i];
                index=i;
            }
        }
    }
    return index;
}
void dijkstra(int **edges,int n)
{
    int *visited=new int[n];
    int *dist=new int[n];
    for(int i=0;i<n;i++)
    visited[i]=0;
    for(int i=0;i<n;i++)
    dist[i]=INT_MAX;
    dist[0]=0;
    for(int i=0;i<n-1;i++)
    {
        int minVertex=getMinVertex(visited,dist,n);
        visited[minVertex]=1;
        for(int j=0;j<n;j++)
        {
            if(edges[minVertex][j]!=0 && !visited[j])
            {
                if(dist[j]>dist[minVertex]+edges[minVertex][j])
                dist[j]=dist[minVertex]+edges[minVertex][j];
            }
        }
    }
    for(int i=0;i<n;i++)
    cout<<i<<" "<<dist[i]<<endl;
}
int32_t main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n,e;
        cin>>n>>e;
        int **edges=new int*[n];
        for(int i=0;i<n;i++)
        {
            edges[i]=new int[n];
            for(int j=0;j<n;j++)
            edges[i][j]=0;
        }
        for(int i=0;i<e;i++)
        {
            int s,d,w;
            cin>>s>>d>>w;
            edges[s][d]=w;
            edges[d][s]=w;
        }
        int src,dest;
        dijkstra(edges,n);
    }
}