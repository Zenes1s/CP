void build(int s,int e,int index)
{
    if(s==e)
    {
        t[index]=a[s];
        return;
    }
    int mid=(s+e)/2;
    build(s,mid,2*index);
    build(mid+1,e,2*index+1);
    t[index]=min(t[2*index],t[2*index+1]);
}
void updatelazy(int l,int r,int s,int e,int inc,int index)
{
    if(lazy[index]!=0)
    {
        t[index]+=lazy[index];
        if(s!=e)
        {
            lazy[2*index]+=lazy[index];
            lazy[2*index+1]+=lazy[index];
        }
        lazy[index]=0;
    }
    if(e<l || s>r)
    {
        return;
    }
    if(s>=l && e<=r)
    {
        t[index]+=inc;
        if(s!=e)
        {
            lazy[2*index]+=inc;
            lazy[2*index+1]+=inc;
        }
        return;
    }
    int mid=(s+e)/2;
    updatelazy(l,r,s,mid,inc,2*index);
    updatelazy(l,r,mid+1,e,inc,2*index+1);
    t[index]=min(t[2*index],t[2*index+1]);
}
int querylazy(int l,int r,int s,int e,int index)
{
    if(lazy[index]!=0)
    {
        t[index]+=lazy[index];
        if(s!=e)
        {
            lazy[2*index]+=lazy[index];
            lazy[2*index+1]+=lazy[index];
        }
        lazy[index]=0;
    }
    if(l>e || r<s)
    {
        return inf;
    }
    if(s>=l && e<=r)
    {
        return t[index];
    }
    int mid=(s+e)/2;
    int ans1=querylazy(l,r,s,mid,2*index);
    int ans2=querylazy(l,r,mid+1,e,2*index+1);
    return min(ans1,ans2);
}