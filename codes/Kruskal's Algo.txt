#include<bits/stdc++.h>
using namespace std;
#define int long long int
class Edge
{
    public:
    int src;
    int dest;
    int weight;
};
int getParent(int index,int *parent)
{
    if(parent[index]==index)
    return index;
    else
    return getParent(parent[index],parent);
}
bool comp(Edge e1,Edge e2)
{
 return e1.weight<e2.weight;
}
void kruskalAlgo(Edge* edge,int n,int e)
{
    //Sort the Array of edges according to their weight
    sort(edge,edge+e,comp);
    int *parent=new int[n];
    for(int i=0;i<n;i++)
    parent[i]=i;
    Edge *output=new Edge[n-1];
    int cnt=0;
    int i=0;
    while(cnt<(n-1))
    {
        Edge currEdge=edge[i];
        int srcParent=getParent(currEdge.src,parent);
        int destParent=getParent(currEdge.dest,parent);
        if(srcParent!=destParent)
        {
            output[cnt]=currEdge;
            cnt++;
            parent[srcParent]=destParent;
        }
        i++;
    }
        for(int i=0;i<n-1;i++)
    {
        if(output[i].src<=output[i].dest)
        cout<<output[i].src<<" "<<output[i].dest<<" "<<output[i].weight<<endl;
        else
        cout<<output[i].dest<<" "<<output[i].src<<" "<<output[i].weight<<endl;
    }
}
int32_t main()
{
    int n,e;
    cin>>n>>e;
    Edge *edge=new Edge[e];
    for(int i=0;i<e;i++)
    {
        int s,d,w;
        cin>>s>>d>>w;
        edge[i].src=s;
        edge[i].dest=d;
        edge[i].weight=w;
    }
    kruskalAlgo(edge,n,e);
}